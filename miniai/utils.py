# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_utilities.ipynb.

# %% ../nbs/02_utilities.ipynb 2
from __future__ import annotations
import pickle,gzip,math,os,time,shutil,torch,matplotlib as mpl,numpy as np,matplotlib.pyplot as plt
from pathlib import Path
from operator import itemgetter
from itertools import zip_longest
import fastcore.all as fc

from torch import tensor,nn,optim
from torch.utils.data import DataLoader,default_collate
import torch.nn.functional as F

from datasets import load_dataset,load_dataset_builder
from matplotlib.pyplot import axes as ax

# %% auto 0
__all__ = ['show_image']

# %% ../nbs/02_utilities.ipynb 4
@fc.delegates(plt.Axes.imshow)
def show_image(img, ax=None, title=None, noframe=True, figsize=None, **kwargs):
    # prepare images.  Check if pytorch tensor by using attributes
    if fc.hasattrs(img, ('cpu', 'permute', 'detach')):
        img = img.detach().cpu()
        if len(img.shape)==3 and img.shape[0]<8:
            img = img.permute(1,2,0)
        elif not isinstance(img, np.ndarray):
            img = np.asarray(img)
    # If only one channel remove the dimension
    if img.shape[-1] == 1:
        img = img[...,0]
    # if axes do not exist then create them
    if ax is None: _,ax = plt.subplots(figsize=figsize)
    # plot the array
    ax.imshow(img, **kwargs)
    # Add a title
    if title is not None: ax.set_title(title)
    # turn off tick marks
    ax.set_xticks([])
    ax.set_yticks([])
    # Finally set whether or not to show a frame
    if noframe:
        ax.axis('off')
    return ax
