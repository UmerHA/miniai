# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/miniai',
                'doc_host': 'https://fromLittleAcorns.github.io',
                'git_url': 'https://github.com/fromLittleAcorns/miniai',
                'lib_path': 'miniai'},
  'syms': { 'miniai.core': { 'miniai.core.foo': ('core.html#foo', 'miniai/core.py'),
                             'miniai.core.say_hello': ('core.html#say_hello', 'miniai/core.py')},
            'miniai.datasets': { 'miniai.datasets.DataLoaders': ('datasets.html#dataloaders', 'miniai/datasets.py'),
                                 'miniai.datasets.DataLoaders.__init__': ('datasets.html#dataloaders.__init__', 'miniai/datasets.py'),
                                 'miniai.datasets.DataLoaders.from_dd': ('datasets.html#dataloaders.from_dd', 'miniai/datasets.py'),
                                 'miniai.datasets.collate_dict': ('datasets.html#collate_dict', 'miniai/datasets.py'),
                                 'miniai.datasets.get_dls': ('datasets.html#get_dls', 'miniai/datasets.py'),
                                 'miniai.datasets.inplace': ('datasets.html#inplace', 'miniai/datasets.py')},
            'miniai.model_blocks': { 'miniai.model_blocks.DownBlock': ('model_blocks.html#downblock', 'miniai/model_blocks.py'),
                                     'miniai.model_blocks.DownBlock.__init__': ( 'model_blocks.html#downblock.__init__',
                                                                                 'miniai/model_blocks.py'),
                                     'miniai.model_blocks.DownBlock.forward': ( 'model_blocks.html#downblock.forward',
                                                                                'miniai/model_blocks.py'),
                                     'miniai.model_blocks.EmbUNetModel': ('model_blocks.html#embunetmodel', 'miniai/model_blocks.py'),
                                     'miniai.model_blocks.EmbUNetModel.__init__': ( 'model_blocks.html#embunetmodel.__init__',
                                                                                    'miniai/model_blocks.py'),
                                     'miniai.model_blocks.EmbUNetModel.forward': ( 'model_blocks.html#embunetmodel.forward',
                                                                                   'miniai/model_blocks.py'),
                                     'miniai.model_blocks.UpBlock': ('model_blocks.html#upblock', 'miniai/model_blocks.py'),
                                     'miniai.model_blocks.UpBlock.__init__': ( 'model_blocks.html#upblock.__init__',
                                                                               'miniai/model_blocks.py'),
                                     'miniai.model_blocks.UpBlock.forward': ('model_blocks.html#upblock.forward', 'miniai/model_blocks.py'),
                                     'miniai.model_blocks._conv_block': ('model_blocks.html#_conv_block', 'miniai/model_blocks.py'),
                                     'miniai.model_blocks.conv': ('model_blocks.html#conv', 'miniai/model_blocks.py'),
                                     'miniai.model_blocks.saved': ('model_blocks.html#saved', 'miniai/model_blocks.py')},
            'miniai.plotting': { 'miniai.plotting.get_grid': ('plotting.html#get_grid', 'miniai/plotting.py'),
                                 'miniai.plotting.show_image': ('plotting.html#show_image', 'miniai/plotting.py'),
                                 'miniai.plotting.show_images': ('plotting.html#show_images', 'miniai/plotting.py'),
                                 'miniai.plotting.subplots': ('plotting.html#subplots', 'miniai/plotting.py')},
            'miniai.utils': { 'miniai.utils.collate_device': ('utils.html#collate_device', 'miniai/utils.py'),
                              'miniai.utils.set_seed': ('utils.html#set_seed', 'miniai/utils.py'),
                              'miniai.utils.to_cpu': ('utils.html#to_cpu', 'miniai/utils.py'),
                              'miniai.utils.to_device': ('utils.html#to_device', 'miniai/utils.py')}}}
